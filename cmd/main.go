package main

import (
	"log"
	"net/http"
	"os"
	"pt-xyz-multifinance/config"
	"pt-xyz-multifinance/internal/handler"
	customMiddleware "pt-xyz-multifinance/internal/middleware" // Alias untuk middleware internal
	"pt-xyz-multifinance/internal/repository"
	"pt-xyz-multifinance/internal/usecase"
	"pt-xyz-multifinance/pkg"

	_ "pt-xyz-multifinance/docs" // generated by swag init

	"github.com/joho/godotenv"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	echoSwagger "github.com/swaggo/echo-swagger"
)

// @title           PT-XYZ Multifinance API
// @version         1.0
// @description     API untuk PT-XYZ Multifinance
// @host            localhost:8080
// @BasePath        /
// @securityDefinitions.apikey BearerAuth
// @type            http
// @scheme          bearer
// @bearerFormat    JWT
// @name            Authorization
// @in              header
func main() {
	// Load .env file (kalau ada)
	_ = godotenv.Load()

	cfg := config.New()
	db := pkg.NewDatabase(cfg)
	defer db.Close()

	// Inisialisasi Consumer
	consumerRepo := repository.NewConsumerRepository(db)
	consumerUC := usecase.NewConsumerUsecase(consumerRepo)
	consumerHandler := handler.NewConsumerHandler(consumerUC)

	// Inisialisasi User
	userRepo := repository.NewUserRepository(db)
	userUC := usecase.NewUserUsecase(userRepo)
	userHandler := handler.NewUserHandler(userUC)

	// Inisialisasi Transaction
	transactionRepo := repository.NewTransactionRepository(db)
	consumerLimitRepo := repository.NewConsumerLimitRepository(db)
	transactionUC := usecase.NewTransactionUsecase(transactionRepo, consumerLimitRepo)
	transactionHandler := handler.NewTransactionHandler(transactionUC)

	e := echo.New()

	// Middleware Rate Limiter (misal global: 20 req/detik/IP)
	e.Use(middleware.RateLimiter(middleware.NewRateLimiterMemoryStore(20)))

	// Ambil username dan password Swagger dari .env/env
	swaggerUser := os.Getenv("SWAGGER_USER")
	swaggerPass := os.Getenv("SWAGGER_PASS")

	// Gunakan middleware.BasicAuth dari echo/v4
	swaggerBasicAuth := middleware.BasicAuth(func(username, password string, c echo.Context) (bool, error) {
		if username == swaggerUser && password == swaggerPass {
			return true, nil
		}
		return false, nil
	})

	// Swagger endpoint
	e.GET("/swagger/*", echoSwagger.WrapHandler, swaggerBasicAuth)

	// Health check endpoint
	e.GET("/health", HealthCheck)

	// API routes
	api := e.Group("/api/v1")

	// Consumer routes (dengan JWT middleware dari internal/middleware)
	api.POST("/consumers", consumerHandler.Create, customMiddleware.JWTMiddleware)
	api.GET("/consumers/:id", consumerHandler.GetByID, customMiddleware.JWTMiddleware)

	// User routes (tanpa middleware, untuk register & login)
	api.POST("/register", userHandler.Register)
	api.POST("/login", userHandler.Login)

	e.POST("/transactions", transactionHandler.CreateTransaction, customMiddleware.JWTMiddleware)
	e.GET("/transactions/:id", transactionHandler.GetTransactionByID, customMiddleware.JWTMiddleware)

	// Start server
	e.Logger.Fatal(e.Start(":" + cfg.ServerPort))
}

// HealthCheck godoc
// @Summary      Health Check
// @Description  Cek status service
// @Tags         Utility
// @Success      200  {object}  map[string]interface{}
// @Router       /health [get]
func HealthCheck(c echo.Context) error {
	log.Println("Health check endpoint hit")
	return c.JSON(http.StatusOK, map[string]interface{}{
		"status":  "ok",
		"message": "Service is healthy",
	})
}
