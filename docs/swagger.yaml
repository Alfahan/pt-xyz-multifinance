basePath: /
definitions:
  dto.ConsumerResponse:
    properties:
      birth_date:
        type: string
      birth_place:
        type: string
      created_at:
        type: string
      full_name:
        type: string
      id:
        type: string
      ktp_photo_url:
        type: string
      legal_name:
        type: string
      nik:
        type: string
      salary:
        type: number
      selfie_photo_url:
        type: string
      updated_at:
        type: string
    type: object
  dto.CreateConsumerRequest:
    properties:
      birth_date:
        description: '"YYYY-MM-DD"'
        type: string
      birth_place:
        type: string
      full_name:
        type: string
      ktp_photo_url:
        type: string
      legal_name:
        type: string
      nik:
        type: string
      salary:
        type: number
      selfie_photo_url:
        type: string
    required:
    - full_name
    - legal_name
    - nik
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      token:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.RegisterResponse:
    properties:
      email:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
  dto.TransactionRequest:
    properties:
      admin_fee:
        minimum: 0
        type: integer
      asset_name:
        type: string
      consumer_id:
        type: string
      contract_number:
        type: string
      installment:
        minimum: 1
        type: integer
      interest:
        minimum: 0
        type: integer
      otr:
        minimum: 1
        type: integer
      tenor_month:
        enum:
        - 1
        - 2
        - 3
        - 6
        type: integer
    required:
    - admin_fee
    - asset_name
    - consumer_id
    - contract_number
    - installment
    - interest
    - otr
    - tenor_month
    type: object
  dto.TransactionResponse:
    properties:
      admin_fee:
        type: integer
      asset_name:
        type: string
      consumer_id:
        type: string
      contract_number:
        type: string
      created_at:
        type: string
      id:
        type: string
      installment:
        type: integer
      interest:
        type: integer
      otr:
        type: integer
      tenor_month:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: API untuk PT-XYZ Multifinance
  title: PT-XYZ Multifinance API
  version: "1.0"
paths:
  /api/v1/consumers:
    post:
      consumes:
      - application/json
      description: Create/register a new consumer
      parameters:
      - description: Consumer Data
        in: body
        name: consumer
        required: true
        schema:
          $ref: '#/definitions/dto.CreateConsumerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ConsumerResponse'
        "400":
          description: invalid request or validation error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Register new consumer
      tags:
      - consumer
  /api/v1/consumers/{id}:
    get:
      description: Get detail of consumer by ID
      parameters:
      - description: Consumer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ConsumerResponse'
        "404":
          description: consumer not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get consumer by ID
      tags:
      - consumer
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and generate a token
      parameters:
      - description: Login Credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: invalid request or validation error
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: invalid credentials
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login user
      tags:
      - user
  /api/v1/register:
    post:
      consumes:
      - application/json
      description: Create/register a new user
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.RegisterResponse'
        "400":
          description: invalid request or validation error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register new user
      tags:
      - user
  /health:
    get:
      description: Cek status service
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Health Check
      tags:
      - Utility
  /transactions:
    post:
      consumes:
      - application/json
      description: Endpoint to create a new transaction. Validates consumer limit
        and processes the transaction.
      parameters:
      - description: Transaction data
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/dto.TransactionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Transaction created successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request or limit exceeded
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new transaction
      tags:
      - Transactions
  /transactions/{id}:
    get:
      consumes:
      - application/json
      description: Fetch details of a transaction by its ID.
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Transaction details
          schema:
            $ref: '#/definitions/dto.TransactionResponse'
        "404":
          description: Transaction not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get transaction by ID
      tags:
      - Transactions
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
